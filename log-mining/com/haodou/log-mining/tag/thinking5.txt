1. 在一个概念里面，存在几种情况：
一种索引是当本概念被触发，过去通常就是将本概念的名字作为默认索引。
对于这种情况，可以做一些扩充，除了名字外，我们可以为每个概念指定更多的默认索引。
[不过其他索引都可以事先映射到名字索引。]

值得注意的，不仅属性值可以作为索引，没有赋值的属性名也可以作为索引。属性名作为索引时，哈哈，通常会去找其对应的属性值吧。
------------[这个就是所谓的目标-》特征倒推了。属性名是目标，属性值是特征。]

当然，如果属性名的取值已知了，则通常先用属性值做索引。
【模板里面的元素都可以看成索引不。不是，这里的索引不是模板，因为模板是静态的，而是在动态匹配过程中，哪些元素应该优先被提取出来，放到工作栈里面，下一步用于去匹配模板。】

另一种索引是，当本概念的某个取值被触发，则根据对应的约束条件所得出的新属性值被触发来作为索引。



2. 基本概念：
对象	[search: 实体 or ...]
    [search这样的字段，是专门为搜索目标而设计的。]
	从描述层面讲，实体通常作为话题。话题通常能够贯穿全文。所以，实体不仅是概念层面的问题，还是描述层面的问题。对象这个概念，本身也是描述层面的概念。
【这样的searcn就是目标倒推模板。可以选择概率最大的特征作为子目标，确定新的搜索方向。但是，要确立回溯机制。】

动作	动作.对象
	动作可以分为那个子类。每个子类的框架要具体定义。子类之间的关系也要具体定义。


3. 目标作为索引：
通常是将已知字符串或者概念作为索引。模板中的元素都是已知元素。

但是，我们也可以将目标元素作为索引。这样，可以加快搜索速度。
对于每个目标概念，我们都定义如果存在某个目标元素（不是已知元素）时，下一步的搜索方向。
第一种：目标满足；第二种，指定新的搜索目标；第三种，目标否定。第四种，无关。
【目标可以是属性名，为属性名寻找属性值。如果没有找到属性值，就是失败。
目标也是可以是属性值，如果找到了属性名，但是属性值冲突，则矛盾。
要区分失败和矛盾。

某个概念的属性名，如果其父概念没有这个属性名，则将这个概念映射到父概念时，有无属性名则成了属性值。这时候，找到了父概念却没有找到目标属性名，可以视为矛盾。
】

每引入一个新概念，我们都会提出一些新的目标。在特定的上下文中，又会引入新的目标。
目标一旦提出，则需要将目标作为索引，以便搜索答案。

4. 合法性是原始动力。就是这个词语为什么要放在这儿。
为了验证合法性，就要提出几种假设。每个假设是个目标概念。但是，这个目标概念需要验证。

验证的一般步骤是怎样的呢？

之前的模板是这样的：都是向相邻的领域去寻找目标。
在后面的推导，目标域的确定不再那么简单直接。

以后的模板就包括两部分：目标域的确认。在目标域里面的匹配。
像“因为。。。所以”这样的连词，可以起到划分目标域的作用。


5. 将	Right.	[对象 as A][动作 as B with B.对象=A]	
[看起来这种应该放在组合模板里面，而不应该放在概念里面。但是，问题是，像“对象”这种，过于抽象。很难在没有“将”这个显示索引的情况下低成本地召回。因此，将其作为显示索引“将”的一个部分是可以的。]
为了验证“动作”的对象的确是A，系统可以提问，“面团可以排气吗？A。是
B.否”，将这样的问题通过界面展示给人类专家。由专家作答后，反馈给系统。

[在这里，当出现“将”时，可以将“动作”和“对象”作为目标，然后将目标转化为目标索引。看看有没有相关的模板。
区分目标索引和结果索引。]

[对于某些泛化，我们不想过度。因为那样效率太低。只有目标索引出现时，这类泛化模板才被激发。
因此，目标模板可以作为低概率模板的触发条件。
目标索引本身是一种推断。目标索引的概率要比低概率泛化模板的概率要高，这时候目标索引才有存在的意义。
也就是说，我用当前词来推断相邻词的性质，这种推断本身的概率要高。

可以说，目标模板反映了概念的结构功能。是描述层面的问题。
每个概念都有配套的描述模板。
]

写了不完备的模板怎么办？后续都可以纠正嘛。
只是纠正的时候，要考虑到纠正行动的所有影响。

发酵->排气   动作结果是另一个动作的 原因
分--》等份		动作与结果
盖-》上    趋向动词。表示接触、附着以至固定

汉语中的每一个趋向动词都有各自的基本意义。以“上”为例。根据《现代汉语词典》的解释,“上”是“从低处到高处”。多数趋向动词除了基本义之外,还有引申义。刘月华《实用现代汉语语法》对“上”的意义的解释是:1.表示人或物体通过动作由低处向高处移动,没有确定的立足点,如“龙梅把羊赶上山”。2.表示通过动作,人或物体向立足点移动,趋进立足点,如“老王问我,我就快步走上前问他有什么事”。3.表示接触、附着以至固定,如“请你把门关上”。4.表示实现了预期的或希望达到的目的,如“他终于买上了他喜欢的汽车”。5.表示动作或状态的开始,如“老师刚说了一句话,学生们就议论上了”。汉语趋向动词如此丰富的意义都在不同的语境中体现出来。



6. 抽象的概念无法表达的问题：
（1）词语，分句这样的概念。一方面要落实到描述层面，这个在于字符串长度，常见的分隔符（如标点符号）。
常见的分词、分句、分段、分篇工具或者方法，与模板匹配的方法如何融合。
[那是结构层面的问题。现在本来就要有结构和概念的分野。这个就相当于结构功能主义中的结构和功能。]

上面的问题是一个结构功能的问题（描述层面），每个概念都可以加入到模板中，也就是说它们都有结构功能。因为模板是要指定搜索域（目标域），实际上就包含了结构功能。

当然，概念本身的描述功能不强。但是概念的Name字段中的取值，这些词语是字符串，有很强的描述属性。

[词语这样的概念，最大的问题在于他们无处不在。所有的文段都有词语属性，基本都有句子属性。
所以，他们取值范围太大，这个属性上的信息量也就太大。]


7. 几个问题整理：
(1)概念都是一个dict。
这个dict可以为了不同的目的有多种索引方式。
目的之一，为了引入新的属性。ISA可以继承父概念的属性。
继承父概念的属性可以引入新的目标和新的索引。这些索引在被别的概念接收后，可以引入新的概念候选。
目的之二，检索索引或者目标。
这时候，应该直接将属性或者属性值作为dict的键值，而不是以ISA作为键值。

(2)同一个概念中的不同属性，天然地构成关联。
在文本中，他们通过描述结构关联起来。
概念关联和描述关联要对应起来。


8. “人”和“钓鱼”的关系：
彼此都不能作为对方的属性。“钓鱼”只是用到了“人”的部分属性。
所有实体做属性都存在这个问题。
只有一些我们常见的属性词，不存在这个问题。
因此，我们可以将常见的属性词单独整理出来。

完全    ATTR_OF.[状态].[程度]：高
“完全”作为“【状态】”的属性似乎没有什么问题。

对于，“人”和“钓鱼”的关系。“钓鱼”作为一个关系型概念，实体“人”是作为参与者，而不是属性。
区分“参与者”和“属性”是很有好处的。

其实，我们没有必要引入“参与者”这个新概念。
因为，“颜色”是“物体”的属性，而“人”只是“钓鱼”的属性值。
“红色”是属性值，也应该作为“参与者”的角色。
属性名是“属性”，而属性值则是“参与者”。属性名是依附于所属的概念，是没有选择余地的。属性值则可以有选择余地。

9. 目标和索引其实难以区分：
前面，我们从某个字符串引入某个概念，这个概念可以作为后面的索引。但其实，本质上，这个索引也是目标。因为只有这个索引与更大层级的概念能够进行整合时，这个概念才能被确认。
因此，从这个意义上讲，目标就是索引，索引就是目标。


那么，为什么还要提“目标”这个概念呢？
从本质上讲：
（1）“目标”是概率比较低的索引。因为还没有得到完全确认。
（2）“目标”具有重要性，是一个绕不过去的问题，需要解决的问题。

现在的问题是：“重要性”该如何解读呢？
比如，“合法性”这个就是一个很重要的目标。基于这个目标，会产生很多的索引目标。【这里区分索引目标和功能目标。】

10.	多尺度多层级的概念框架。
正如sift算法中的多尺度框架一样，概念框架也是多尺度的。
对于每一个尺度，我们都应该有相关的表示和推导。


11. 几个问题：
（1）概念：用dict表示

（2）关系型概念。动作，ISA都是关系型概念。
普通概念也有将属性组合起来的能力。但是，显然，属性的独立性不够好。
这种独立性对于系统设计本身是有意义的。
独立性越强的概念，成为话题的可能性越大。
显然，“手机”相对于“红色”，更容易成为话题。

（3）一个问题：目标的问题。如果有多个目标，多个目标要同时满足。
如果目标不能满足，则要进行概念识别以保证目标概念的要素齐全，或者否定该目标。
什么概念可以称为目标呢，在特定上下文下，这个是个问题。

（4）目标问题的后面是概念层级问题，并行分析角度问题。
同一层级内部，并列的概念在概率空间是互斥的。
同一个体系的不同层级之间，概率空间不互斥，而是关联的。
不同角度的概念之间，概率不互斥，也不关联。
对应到概念：同一个属性上的取值是互斥关系，一个概念上的不同属性是独立关系，概念与属性，属性与属性值是层级关系。

在做文本解析时，我们遇到的是一段文本。那这段文本可以被视为是一个整体概念。这个概念有不同属性，也有属性的取值。
我们可以界定清楚。

（5）概率分层。每层都有分布空间。比如，LDA中的多个topic共享一个分布空间。
而我们的体系中则有多个分布空间。

两个概念是否共享一个分布空间，这个是由两者的关系决定的。在计算概率之前，两者的关系已经确定了。

当然，概率计算完成后，我们可以在接下来的迭代过程中重新计算两者的关系。

这是典型的参数分层。
概念之间的关系，由另外一些参数决定。

(6)
不相容性，实际上很少发生在概念层面。概念层面的不相容是矛盾性，而矛盾性很少出现在真实的文本中。一旦出现了矛盾性，则意味着问题来了，实际上很少发生。
真实的不相容性主要发生在描述层面。一个字符串有多个意思，这些意思之间不存在矛盾性，但是却存在互斥性。也就是在特定的上下文中，一个字符串只有一种意思。
当然，我们将字符串本身看成一个概念，则可以视为矛盾性。
但是，将每个字符串看成一个概念并不利于解析。所以还是不要这么做。
描述层面的这种互斥性基于现有的模板匹配就可以消岐。因为与上下文不能共享模板的元素自然会被排除。我们从概率较高的元素开始搜索，这个过程本身就暗含了消岐。


比较麻烦的是在多层次体系下（现有的模板就是这个情况），怎么计算概率。
从字符串到意思的映射，这个概率是需要统计的。
在每个特定的句子中，应该只有一种意思。这时候，概率只是计数而已。
当然，可能在搜索过程中，搜索出多种结果，则需要启动消岐过程，而不应该对有歧义的地方进行概率计数。

对于每个具体的句子，我们要求推导出的结果概念之间，关系是清楚的。是ISA，ATTR，BROTHER等，或者复合关系（就是两个概念之间同时具有多种基本关系）。


比如，在一个菜谱中提及“木耳”，但是我们不知道是干木耳还是湿木耳，我们将努力去推导这个。但是，如果推导不出来，我们则只统计木耳，而不会去统计“干木耳”或者“湿木耳”。
当然，我们知道，默认情况是“干木耳”。
默认项是这样的情况：如果没有找到否定依据，则取默认值。
经过大量验证的默认项在没有遇到否定项时，我们认为已经推导出来了，所以可以统计。
但是，对于菊花的颜色，没有默认项，如果推导不出来，就不统计其颜色了。


关于层级问题，关于目标问题：
每一个在模板中被匹配到的因素，都有理由成为目标。
为此，应该保证目标的多样性。
再选择目标时，不仅要保证选择概率最高的，也要注意层级的丰富性。


12. 重新总结：
（1）每一个模板就是一个目标。
为什么要写模板，是因为我们需要以模板的形式将目标告诉给电脑。
模板除了作为目标外，还要作为特征。
有时候我们并不想做语法分析，但是，还是想将动词，主语等作为特征。
前面的模板都是从特征->目标的模板，后面要加入从目标->特征的反推模板。

为了保证在知识库无限增大后，推理不至于变得过分臃肿，需要确定一个从目标开始的搜索。
目标给定一个初步定位。

反推模板与普通一个最大的区别在于：
反推的目标本身是没有支撑的，在模板的右部被验证之前。
而普通模板本身已经得到支撑。

（2）判定一个组成部分的含义。首先，挖空该组成部分。看用什么来替换概率最高。
这是语言模型的概率。
还要看替换概率。有些词语基本上不具备多样性，也就是他们只有很少的，或者固定已知的同义模式。
当然，实在不行了，可以提出假设。将这个假设放到更多的上下文中去验证。

这种验证可以看成目标-》特征的反推。

反推模板目标：将优先级高的目标优先进行推导，是一种自顶向下的搜索方式。
这个要与自底向上的方式结合起来。
适用于优先级较高，分支较少的目标。
其实，最底层的目标适宜于用自底向上的方法处理。可以两侧交替推进，直至会师。


（3）有两种概率：一种是推导概率；一种是描述概率。推导概率是目标和特征之间的推导概率。这个是有向概率。通常，特征-》目标的概率更大。
描述概率，就是说，虽然特征可以推导出目标1，但是，在解析当前上下文时，我并不必做这种推导。
这个是一个目标的问题。也就是说，目标1不是一个优先级高的目标。

描述概率更多的是这种情况：A位于B后面的概率。实际上是模板出现的概率，通常是模板的特征内部，不同子特征之间的条件概率。
推导概率是模板内部的特征和目标之间的边缘概率（条件概率）。

(4)模板两侧，特征和目标之间是存在关系的。
不同的模板，特征和目标之间的关系可能相同。那么，对于这类模板，我们要有一些通用的处理手法。
ISA是一个很常见的关系。



13. 所谓层级：我的所有要素都是概念化的。
因此，必须有一些可执行的概念。
这些概念概括了程序逻辑。基于这些执行概念，可以对其他概念进行操作。


回溯本身应该概念化。
“Right.  [对象 as A][动作 as B with B.对象=A]”，这里的Right，as A B这样的东西应该概念化。

14. 提问以及提问框架：
提问就是提出目标。对于每个概念，都有一些默认目标。比如菜谱，关心加工工艺等。
如果对一个食材进行两个加工工艺，自然要问两个加工工艺之间的关系。关系有n种类型，自然要对各种可能的类型进行搜索。

一些机器学习的模型适合做召回。而准确性验证则适合于模板验证。
召回本身可以看做一个提问。
我们可以考虑用不同的召回层级来提高提问效率。
当然，既然是召回，可以考虑降低准确率来提高效率。

15. 要将提问规则写成模板。
不要寄希望有一个简单的提问规则。付诸于模板，让他可以复杂化。

16. (1)一切都模板化，这个是个很好的目标。
但是，那样的模型超级复杂。无法调适。怎么样保证在出现问题时能够很容易地追溯原因呢。

本质的问题是搜索空间巨大。很难寻找最优解。就是找次优解也很复杂。

(2)一些高层的抽象模式，其展现机会很少。每次为了使其复现，代价都很大。

抽象模式的描述就很困难。其模板描述很麻烦。因为其元素本身是抽象的。
如果解决了这个描述问题，其实问题就解决一半了。

(3)每个模式或者概念需要知道自己的边界条件。
不过未知的边界条件是很多的，这个要求系统具有全意识？

缺乏训练数据时，边界条件无法验证。

(4)自动丰富概念的内涵。
通过区分同类概念来丰富概念的内涵。比较“淘”和“洗”的区别来丰富其内涵。关键问题是，在比较区别时，如何才能找到关键区别。
要建立一套丰富内涵的机制。
可以看成一个属性召回问题，同样具备召回-验证步骤。

(5)必须满足的约束：
如：模板必须覆盖整个文本。只有这样的模板以及其子模板，才被视为有效的模板匹配。这样的约束是必须被满足的约束。


17. 以整体的协调一致性作为判定准确的标准。协调一致性是由模板规定的。
以机器学习的概率模型作为召回标准。召回的概念用于填充模板，用于进一步判定整体一致性。




