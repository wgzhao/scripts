1.	要写一个与现有匹配相独立的系统。用第三方模块将非独立约束与现有系统整合。
这样采取模块独立化，便于后期的程序管理。


2.	写一些非相邻约束和通配模板。

3.	非相邻约束的搜索空间太大。为了提高效率，除个别例子外，通常采取后期处理的模式。也就是放在通常的模板匹配后面。

为了提高处理效率，放在后面又怎么剪枝呢。如果还是把整个文段解析一遍的话，也不能压缩解析空间。【如果单纯为了非相邻约束来重新解析整个文本的话，则实际上达不到提高效率的效果。】


4.	现有的非相邻约束，与过去的相邻约束模板可能重叠。怎么处理？
这就涉及消岐和相容性判定。
【相邻约束和非相邻约束是互补的时候，可以共存。否则，就会推导出矛盾，需要进行剪枝。】

当然，第一步，我只做非相邻约束模板的匹配，再考虑消岐问题。
因为相邻约束的模板本身也存在消岐和相容问题，这个可以后续统一处理。


非相邻约束，先实现有序非相邻约束。

无序约束的搜索空间更大。貌似。

5.	可以先对位置放松要求。可以将前面已经出现的概念全部存起来【不需要考虑距离远近】，这样来求非相邻约束。
然后，要立即按照位置等约束剪枝。根据具体模板的约束条件。
【其实问题是这样的：位置等约束，作为索引是不合适的，太泛或者使得检索太复杂。因此，将其放在检索之后进行剪枝。如果将检索本身也看做剪枝的话，则是将字符串作为索引进行剪枝的效率比按位置等约束进行剪枝的效率要高，算法更简洁（可以直接利用现有的trie树框架）。】

6.	原来的模板要求一定将一段文字归属到一个概念。可是，那需要定义多少概念啊。
其实啊，只需要将一段文字中的属性全部分解出来就好了啊。
不过，有些属性之间有强关联，可以形成概念。概念是为了简化推理。
而属性则更灵活。
【不过把多个属性综合成一个概念，显然是便于检索，可以提高搜索效率。】

一段文本的属性表示法，该怎么表示呢？

文段：
大米洗过之后沥干水分，放少许盐与橄榄油腌制、江瑶柱洗泡好沥干水分、白果解冻清水略冲洗。腐竹最好在放锅之前才洗，为了拍照我提前洗。
【食材需要洗。但是，对于大米，其“洗”还有一个特定的描述，那就是“淘”。】
哈哈，其他食材也可以用“淘洗”，
“先把蛤蜊用冷水淘洗几次。”
红枣泡完以后多淘几遍，有不少沙土
-------------------其实“淘”有将水从容器里倒出的意思。
【加工工艺要细分。】

7.	非相邻约束的另一种情形：承前省略。被省略的内容在前文中出现，与后文中的内容构成非相邻约束。
另外一种是连词的搭配关系。如“和。。。一起”，“因为。。。所以”。
还有就是topic约束。Topic是一种弥漫全文段的约束。不是相邻，也不是非相邻。还是看做非相邻的好。
承前省略可以看做一种局部的topic约束。


8.	非相邻约束的另外一层含义就是：对于一个元素，它首先是与远处的元素发生关系，然后再与相邻的元素发生关系。
像搭配这种，实际上就是进行了分层。搭配关系是外层，每个被搭配项就是内层。
每个搭配项有自身的语义，还有为了配合搭配关系所体现的搭配项之间的约束。

Topic约束是为了剪枝，加快搜索速度。
哈哈，当然，topic既然作为要素，可以生成新的概念啦。

9.	多目标匹配。如果我将追踪食材状态作为一个目标。则关于食材的信息是非连续的，是非相邻约束。
关于这个目标的匹配可以不必与所有上下文结合。而且，当特定应用只需要食材相关的信息时，这个目标的实现可以很好地帮助满足应用的需求。
而这个目标，一方面可以外部给定，另一方面，也可以扫描文本得到。也就是某些类型的文段，通常会给定某些类型的目标。
通常，一个实体概念都可以作为目标。这些实体概念在数据库中会有历史数据。
还有一种是提问—解答式的目标。那么，要给出一些常见的提问的模式。
[由模板就给定目标了。我们需要给每个被匹配到的模板给予解释。低概率的模板除外。
一个词语有多个意思。这时，它们是位于同一个概念空间的。然后，可以从历史数据中得出，两种意思之间没有关联性。两者之间的关联性可以用互信息这类指标来衡量。位于同一个概念空间，但是在该概念空间中出现时，两者之间却没有关联性的概念，两者在该概念空间是不相容的。
为什么要强调位于同一个概念空间呢？因为如果不是位于同一个概念空间，我们根本没有必要去考虑两者的相容性，只需要认为两者是两个截然不同的维度就可以了。]

10.	非相邻约束的一个显然的作用就是消岐。剪枝。
通过非相邻约束导出矛盾。就是非兼容性。

11.	总而言之，非相邻约束对现有模板推导有以下作用：
（1）	topic或者承前省略这类，起到要素填充的作用。
a.	这类模板的书写比相邻模板更困难。总之得先找一些实际的例子。
b.	有了这种要素填充，模板书写可以更加严格（有更充分的上下文），避免一些歧义过大的泛模板出现。
c.	相对于承前省略，Topic的定义则比较复杂一些。暂时将topic限定在实体概念上。哈哈，我们难道不可以定义抽象的实体概念啊。承前省略的东西和topic，都可以归纳到人工定义的概念上面。

（2）	搭配关系等，提到结构分层的作用。句子之间的关系处理，需要用到这种。
（3）	推导出矛盾进行剪枝。
（4）	赋予额外的推导目标，给出更丰富的输出。
比如步骤之间的先后关系，在现有的相邻模板推理中，没有给出这个关系，整个文章也能被完整匹配。但是完整匹配并不意味着所有重要信息已经披露。
“将拌好的面撒入铺好篜布的锅中，撒之前篜布要浇上凉水”  【这里没有按照时间顺序来介绍，是因为把重要信息放在叙述的前面。而发生时间在前的步骤则被挪到了后面。】

12. 非相邻约束的表示才是更重要的问题。
前面，对于相邻约束。总是把它合并到一个新概念里面。这时候，它的表示很简单，检索也很方便。

但是，问题是，我们不能创造那么多新概念。
另外，外部可能只需要用到新概念里面的部分属性。这样子，我们不得不为每个字符串配多个概念。

非相邻约束不相邻，如果放到一个概念里面。因为概念包含的字符串不相邻，与其他概念的字符串会有相互交织的关系。这种交织关系的描述就变得复杂了。
这意味着，我们对于非相邻约束的描述需要有一套新的描述机制。

13.
约束表示，元模式提取（很多元模式也可以看成是一种约束）【下面要探讨约束，这种约束可以相邻，也可以不相邻】
（1）“2-3球冰淇淋”
这里面有一个形状来表示量的，因为这里的形状通常是有规格的。这里的“球”是包含指代关系的，用球来指代规格，而实际使用的是规格中的量。
用5寸的冰激凌勺一般一个球是45克，勺子的大小不同所以冰激凌的克数也不同，5寸的冰激凌勺是比较常用的，一般超市都能买的到这种冰激凌勺

不过，因为这种规格只在特定场景出现。导致球在做体积单位时所能描述的对象上也构成了约束。

指代关系应该怎么描述，怎么推导呢？指代关系存在概念填充的问题。当然，还是要建立一套具体的指代规则，不仅仅是填充这么一句话能说清楚的。
哈哈，不仅仅是做填充，而是做替换。哈哈，为什么要将AC替换成BC呢，因为A,B同属一个概念体，且有类似的A'->B'的习惯。A'是A的父类，B'是B的父类。而p(BC)>p(AC).

(2)从上面的例子来看，要讨论约束，概率是应该加进去的。

非相邻的约束的话，概率更加重要。因为在前面的相邻模板推导中，总是相邻优先，长度优先，从而规避了概率的问题。

(3)怎么样将启发式搜索方法作为约束的一部分。
通过书写多样化的约束，实现多样化的启发式搜素（剪枝）

[加工步骤]-->入味(39,41)(<[加工工艺][食材属性]>)
[加工工艺]-->入味(39,41)(<[加工工艺][食材属性]>)
[放入]-->入(39,40)(<入>)
[状态]-->入味(39,41)(<[状态变化]>)
[混合分离]-->入(39,40)(<[放入]>)
[味道变化]-->入味(39,41)(<入味>)
[状态变化]-->入味(39,41)(<[味道变化]>)

将“入味”作为一个整体来描述的更合适啊。

14.
首先确定概念的覆盖范围。在任意一定长度的文段中，都有一个中心概念，就是话题。
(1)米洗过之后沥干水分，放少许盐与橄榄油腌制、江瑶柱洗泡好沥干水分、白果解冻清水略冲洗。
“与橄榄油腌制”的对象是“米”。
(2)
大的阶段，上面是准备阶段，还没有进行食材的混合。因此，在默认概念中还没有“锅”。因此，放入的对象是“米”。
（3）小范围内，“盐”等调味品和腌制之间存在约束关系。-------P（盐|腌制）的概率很高。腌制的主料一般是肉。辅料的选择范围也是有限的。
（4）“洗”和“沥干”之间存在着依赖关系。因为“洗”的后果使得食材沾水，所以需要沥干。
（5）“洗泡”放在一起，是因为两个步骤所使用的厨具相同，步骤紧接。甚至在洗的同时已经实现了泡。不过，通常，泡会在洗完之后依然持续。

15
(1)几个要素：a.话题以及话题之间的关系。面粉，加水和之后就成了面团。话题切换到面团了。

(2)将面团擀成椭圆形，一边压薄，翻面后将中间划三刀
对于一个立体图形，其任何一个侧面或者截面都是一个平面图形。不过，从描述角度来讲，有一些特定的描述框架，所以，对于上面的椭圆形和薄，我们知道其指的是哪个侧面。

面团：形状描述（椭圆，薄）
动作
----【基本描述框架，实体，动作。】

(3)撒上适量的蔓越莓干
“撒”的基本含义有放入的意思。另外一层，对被撒入的对象的形状是有约束的。
分层解析。每一层的解析都可以借用已有的框架。

（4）从一端卷起，捏紧尾部
“一端”和“尾部”都是位置关系。
位置关系有那几种情形，每种情形又有哪些维度呢？

(5)依次将所有的面团整形
“依次”和“所有”之间的依赖关系。

（6）排放在铺了油纸的烤盘中
“排”是多个物体之间的位置关系。强调的是整齐性。

（7）最后发酵至两倍大，刷上鸡蛋液。

（8）烤箱预热
这里用到了“预”，从其本身含义，有准备的意思，准备则意味着在某个正式步骤开始之前。
这就要求我们去找正式步骤。

(9)隔水加热
这里隔水加热的含义：继承通常的加热概念。
目标食材。不变。
容器中盛水，水中再放容器。
隔水加热与通常的加热不同，那么啥时候需要隔水加热，而不是通常的加热呢。

(10)把可可戚风蛋糕放在晾架上,放进盆里
蛋糕连同晾架被一起放进了盆里。

放进隐含：被放入的物体的体积相对于容器的容量要小。

(11)比起实体，关系的检索更加困难。特别是对于一些抽象的关系。
对于这些情况，应该先找到承载这个关系的概念。
然后看这个概念下的约束关系。
一个是概念下不同属性之间的约束关系。一个是同一个属性取值上的比较或者变化关系。
比如，“从一端卷起，捏紧尾部”，这里的“一端”和“尾部”的承载体是面团。而且，两者讲的都是位置。
不过，这里因为有动作，所以实体概念本身在发生变化。开始是一个面的“一端”，卷起后，面变成了条，然后是一个条的“尾部”。

[题外话：这里的“捏紧尾部”是有隐含的目的的。这个要从“卷起”这个动作概念的一般目的说起。
对于菜谱而言，“目的”是一个重要的功利目标。这个在检索的重要性上面，要提升。
从统计上而言，凡主体是人的动作，通常都有目的。这个是一个很重要的假设，要作为一个约束加进去。]

16. 一个概念就是一个dict，包含属性名和对应的属性值。
食材是实在的物体，有物态这个属性。

一个概念的引入相当于引入了额外的上下文。要通过概念的隐含含义去扩充上下文。
概念的意义就在于此。

当前的注意力要放在构建概念的隐含上下文。
这里包含的意思，我们并不是仅仅用概念与上下文中的其他部分去归一。
我们还要用概念中的隐含上下文去归一。

有哪几种隐含上下文呢，怎么构建这个隐含上下文。
引入隐含上下文后，搜索空间变大。启发式的搜索变得尤其重要。

“放进”通常要求在上下文中出现被放入物。
但是，对于这个动作的操作者，则通常隐含。

前面的模板匹配中，我们可以将一个概念泛化为多种形式，这可以认为是引入了隐含上下文。
但是，前面的，要求相邻匹配，使得受到了约束。

概念的层级与描述的层级相互作用：
能够立该回弹即可
“立刻”与“回弹”之间的关系并不是特定于菜谱制作的。
也就是，不必将“立刻”归结到加工状态。


原来的[食材][加工步骤]这种，没有约束。
应该加上约束，看食材与加工步骤中的加工操作之间是否满足约束。

隔水加热并不断搅拌
[在时间和空间上都并存的操作。时间上，同时。空间上，操作的是同一个对象。]

17. 重要的是搜索问题。 
基本问题是：选择谁作为索引的问题。在顺序匹配里面，自然是出现在前面的作为索引。按照文本顺序，从前往后扫描即可。

但是，引入非相邻约束后，对于先后顺序也随之放松，而且，还会引入隐含上下文。隐含上下文的出现位置只是一个大致的范围，而不是精确的位置。
选择谁作为索引的关键是一个效率问题。如果不考虑效率，可以穷尽所有的索引方式，但是，那样会爆表。

对于任何一个概念，在特定上下文中，都有问题需要解答。这些个问题就是索引。表明，很可能基于这些问题的索引来对上下文进行解读。比如，对于菜谱中出现的食材，有一个约束，就是这些食材都会在最终的成品中起到特定的作用。那么，我们要去寻找其作用是什么。首先，要寻找其可能的加工模式。
那么，找出食材附近的加工工艺，看其能否与该食材构成搭配。
【这里与检索的关系是：可以拿出那些常见问题直接去上下文中寻找答案。将问题直接填入到上下文中（现在模板中，归一的结果要放到chart中，就是放到上下文中了），也便于别人检索。问题是，为了提高效率，不必一下子把所有的归结结果放入上下文中。可以按概率进行选择。】

食材并非直接去与上下文所有的要素进行搭配，而是经过一定的选择。如“[食材][加工工艺]”这样的约束来缩小范围。
其实，现有的很多模板并不精确，但是不要紧，拿它们来缩小范围就好了。在用现有模板确定范围后，在该范围内进行约束检查。

18. 苹果的字符串概念，水果概念，公司概念。
可以将水果概念，公司概念看成其字符串概念的一个属性。
结合上下文，要将字符串概念跳转到实体概念。

注意的是：这里有相容性问题。“水果”和“公司”这两个属性是不相容的。
字符串“苹果”只能同时具备其中的一个属性。

但是，为啥要把这两者归结为同一个属性的取值？这个才是问题。

“苹果”和"apple"又是什么概念的同一个属性上的不同取值呢？
对于“苹果”和"apple"，从操作层面来讲，不应该在设立一个概念来包容两者。我们将多个字符串共用一个同义框架，或者汉语-外语框架。所有字符串都可以放入这个框架中生成一个临时概念。而不必生成一个实体概念。实体概念则意味着在数据库中保存一个概念记录。
将“苹果-apple”看成该框架中的一个元素。但是，元素具备检索性。元素可以视为实体，但不是概念。
框架才是概念。

概念和实体的区别是什么呢，在实现层面有什么差异？

19. 为每个推理设置一个回溯路径。
比如“苹果+手机”推导出手机概念。但是，“苹果”本身还包含其他选择。
但是，确定回溯方向就像破案一般艰难的工作。因为搜索空间很大，选择搜索方向很重要。
在每个推导过程中，都留一些回溯提示，或有意。
但是，问题是这样的回溯提示只要有n个，对应的路径却是2^n的级别。


20. 组合表达和层级搜索
现在的归一结果，是一个单一的概念。其表达力是不够的。因此，后续搜索要考虑组合概念形式。
对应于组合概念的后续搜索应该是层级搜索。将组合概念中的要素进行分解，每个要素对应到一个层级的搜索。

21. 基于概念的非相邻模板匹配：
（1）与过去相同的是，仍然有模板匹配这种基本模式，匹配的结果会导出一个新的概念。
（2）不同点1：对于模板中的每个元素，要找到其在新概念中对应的槽位。当然，这个在过去的某些模板中可能涉及，因为过去的模板匹配中，有些是先泛化为概念的槽位，然后由槽位组成的模板推导出新概念。但是，有些模板并没有先推导出槽位。
（3）不同点2：要从推导出的新概念中引出一些新的索引项。过去也会有这些索引项，因为新概念可以继续向上递归。
但是，过去的这种引入所受的限制过大。这个限制主要是由必须相邻引起的。
过去因为相邻的缘故，要求从概念中引出来的索引项要求有整体性。这个强制要求抑制了很多可以表达出来的值。

引申一点，新的系统需要提问，每个概念都有关键项。就是关键槽位的取值需要确认。取值可能位于默认上下文中。
提问与过去模板匹配的不同点在于它有强制性。

其实，过去的系统中，trie树上的每一个子节点都是一个提问。但是，那个提问不具备强制性，也没有优先级。
从搜索的角度而言，那个子节点是被索引项，而不是索引项。

另外，提问的结果会反过来修正概念本身。过去是生成新概念，那虽然也可以看成是修正，但是那种方式不够灵活。

(4) 不同点3：需要处理概念之间的交织情况。我们需要清楚地定义有哪些交织情形。
其一，描述层面的概念（如具有宏观结构的语法功能词，因果关系连词，“把”，“将”等）。这些具有宏观结构的功能词，往往与实体概念有同样的跨域。它们往往将多个平行的概念组合起来。虽然说，我们可以将多个平行的概念组合成一个更大的概念。


但是，这些语法词本身怎么充作更大概念的组成部分呢？
我们可以考虑这样的场景：概念A的槽位a,和槽位b之间存在因果关系。[这种因果关系往往有赖于一些表示因果关系的语法功能词来表达。]
这种因果关系可以编码存起来啊。至于，这种关系何时才被检索到，这个就取决于上下文。

太多样化了，会为概念的表达带来很大的压力（复杂性骤增）。怎么样保证灵活性，又能尽量降低复杂性，这是核心问题。

这个还是找一些具体例子吧。
一个食材概念对应多种连续加工步骤。
一个加工步骤处理多种食材。

层级关系本身就是一种组织不同概念的方式。

隔水加热并不断搅拌,直到黑巧克力完全融化，成为可流动的液态。
[加热+搅拌--->结果，结果又作用在对象身上。]
动作概念->实体概念的状态变化。（对于“加热”而言，不一定会导致融化。这个只是加热效果的一个结果之一。对于巧克力而言，操作结果页有多种。即使是巧克力加热，操作的时间长度不同，或者是否加水，是否搅拌，其融化的效果都不同。
因此，要在操作结果与操作、实体之间建立强关联是不可能的。）

(5)针对以上不同点，在代码层面需要改变的地方：
a. 描述概念的框架，需要有属性和属性值。最简单的方法。
b. 从索引和模板推导出新概念跟过去一样，只是可以非相邻。
c. 检查约束要穿插到推导过程中。及时剪枝。
d. 选择概念中的哪些属性或者属性值作为索引项。这个并不是那么直观。
e. 界定概念的覆盖范围。
f.
理清楚概念之间的交织关系：理清楚谁是话题(话题组织模板，要总结若干种模板，层级关系只是其中一种)。
A.
连续步骤。这是一种话题组织模板。话题组织模板中应该去掉概念性元素，如食材。现在的实践看来，将话题元素和概念元素混在一起就造成了较多的歧义。连续步骤之间存在多种关系：顺序关系，并列关系，因果关系，目的关系。
B.插入关系实例：“排放在铺了油纸的烤盘中，我用的是三能烤盘没有垫油纸。”
【“我用的是”是一种补充说明，从话题组织角度来讲，这里说明了例外情况。】
C。表示句子间关系的连词，都是话题组织模板。
【话题组织模板之所以要特殊考虑，不是因为他们无处不在，因而与不同领域的概念相互作用。而是其在描述上的功能，可以将在同一个文段中的概念很好地粘合起来。
像数字，时间等领域无关的概念，虽然也无处不在，但是，没有篇章结构上的功能。】
可以这么说，描述（话题组织）模板起到了对概念的内容进行选取，组织的作用。在进行选取和组织的过程中，当然要尊重概念本来的属性。
话题组织模板代表主观能动性，而概念则代表客观规律。
不过话题组织模板除了考虑结构性因素外，更重要的是要考虑功能。作者用这种结构描述的目的是什么，基于这个目的为什么要采取这种描述结构。那么，怎么为文章的目的建模。这个才是核心。
目的：首先界定目标概念。然后界定作者想要强调的目标概念的属性值。
从描述角度，作者是客观介绍（那可以遵循概念内在的顺序，时间顺序，空间顺序等），还是表达观点（观点内在的结构）。
对于文本中出现的所有概念，都要找到它们与目标概念的直接或者间接关系。
[所以，对于所谓的目标建模，实际上核心问题就是确定目标概念。文章的描述模板应该帮助我们确定目标概念。]

22. 层级划分相关的模板：
比如：慢+动词->动词      这种模板对于过去其实算是一种无奈。
这是一种层级关系的划分。
[将][食材]-->[食材]    这里的层级划分其实错误的。其实，“将”和“食材”是并行的。
过去之所以犯这种错误，只是因为“将”在很多情况下可以省略罢了。

也就是说，划分层级关系时，要注意区分省略关系和修饰关系。
通常，修饰部分对于上层关系的推导是可以省略的。
但是，可以省略的不一定就是修饰部分。

层级关系，有些是概念层面的，有些却是描述层面的。
比如，“将”这个是描述层面的，“慢+[动词]”这种则是概念层面的。
当然，也可以将描述本身看成某种概念。但是，将描述层面的东西独立出来是有好处的。
因为描述层面的东西往往有更大的通用性，与概念层面的东西会交织。
而不同领域的实体概念则相互之间独立向较好。

其实，也有很多跨领域的概念啦。如时间，数字这样的抽象概念，基本上是通用的。

另外一个，就是文章的组织。如旅游景点介绍，论述文，都有自己的行文套路。
这些行文套路怎么与实体概念的属性相呼应。
还是先来人工指定模式吧。

23. 回退（回溯）与层级
起动揉面程序

一般，“启动...程序”都是讲启动自动化运行的机器。
但是，这里从菜谱上下文来看，好像看不到机器。
这时候需要回退。“程序”回退到步骤。步骤可以由机器执行，也可以由人执行。
为什么回溯到人，是由于“揉面”经常由人来执行。

而这里，“揉面”才是核心要素。
“程序”只是辅助因素。

24. 理解，应该触及到何种深度。
“隔水加热”：单纯做文本解析时，如果只强调归约，可能我们不需要知道为什么隔水加热，隔水加热与普通加热有何不同。
但是，如果非相邻约束指出，“隔水加热”作为一种加热类型，有何特别？

首先，看其通常与哪些要素相接。
很明显，这个“隔水”通常与“蒸”这个操作相接。
在食材方面，其选择范围也是有约束的。

那么，我们应该去推导，为什么会造成这种约束。

早期，电脑可能缺乏方法来做这个事情。那么电脑就统计下其上下文特点吧。
至少应该建立一套标准来描述某个概念的上下文分布特点。

不过，对于“隔水”，其真实的含义，还是由外部来给定吧。或者，找到介绍性的文字。
要自己归纳整理，也可以，我们为不同类型的概念建立不同的整理框架吧。
先把它归结到某些概念，然后看它在这些概念的槽位上的取值。

每个概念都有关键槽位。对于非关键槽位，可以不用去管。
关键槽位也通常就是检索项。

25. 模板推导与统计概率的结合。
统计概率包括哪些内容：a. 模板的计数。
b. 一个模板包含AB两个元素，则可以求条件概率。

26. 推导“腌制”的含义：

洗过之后沥干水分，放少许盐与橄榄油腌制
“放入”操作结果是混合物，而“腌制”紧邻，与“放入”共享操作对象。【这种共享行为是一种话题描述模板。】
不过，“放入”的结果不区分主料和辅料。
“腌制”往往隐含辅料而显式标明主料。这种情况，怎么知道有隐含辅料呢？

要善于利用定义性语句去扩充其隐含意义：
腌制是利用食盐的保藏作用，将新鲜果品或者其他方法已经加工过的原料用盐腌渍制成食品的方法。
【这里明确指出了“食盐”，可知这是隐含辅料。单纯靠统计很难推断隐含内容，并且很容易引入噪音。】

除了这样的显式定义外，各种凡是能够帮助抽取概念属性的句子，都可以称为定义性语句。
要注意总结这样的描述模板。
当然，对于特定的概念，其定义性语句的模板可能也不相同。

考虑到省略的问题，隐含属性是无法通过统计来得到。
比如，所有菜都应该放盐，但是在菜谱中却不一定有盐。


对于确定部分，是由知识给定的，不需要统计。统计也只是作为验证，或者提出疑问。
只有属性的取值为集合的，才需要统计。

26. 依赖的问题：
首先，确认槽位之间存在依赖关系。----------早期由人工指定，或者基于规则生成依赖关系。
其次，统计实体的槽位取值之间的共现关系。-----------------自动统计。


【要发现用于描述依赖关系的描述模板，基于这些模板自动识别依赖关系。】

公司(名称： 苹果   产品：iphone）

如果一个概念的某个属性的取值与其他属性的取值不存在依赖关系，则这种属性在本概念推导中也不具备重要性。
当然，可能在更高层的概念推导中发挥作用。


属性之间的描述依赖：在同一个句子中时，A通常位于B的后面。
【这个除了人工写之外，更要进行统计。】

27. 约束实例：
描述模板a推导出A具有B属性（或者属性值），但是我们的规则或者知识库认为具有B的物体都应该具有C，但是A不具备C。所以矛盾。
矛盾出现了能否解释。我们还要有解释框架，来消弭描述模板与概念推导之间的分歧。

解释框架举例：
(1)A其实是指代的H，而H具有B属性或者B所隐含的C属性。
A之所以能够指代H，是由当前上下文给定的，而不是A本身的概念属性给定的。
上下文推导A的指代属性，这个是要结合描述模板与概念模板。
(2)矛盾双方之一的描述模板本身是可以回溯的。
矛盾双方之一的概念本身是可以回溯的。
(3)报警，交给人来处理。

28. 重新清理一下事情：
(1) 概念的描述方式。概念类型：实体，状态，动作。
（2） 概念模板和描述模板的相互作用。分清楚两者的界限。
其实不需要区分概念模板和描述模板。可以将描述模板看成是一类特殊的概念模板。

它与概念模板的交互，与不同类型的概念模板（实体，状态，动作）之间的交互关系是类似的。

（3） 分层问题。
(4) 非相邻约束。
（5）属性依赖模板和统计。矛盾约束。矛盾解释。
(6)一般的消岐问题。基于统计和规则。

29. 目前的重心问题：
概念元素的非相邻约束，概念之间的交互（通过共享元素），同时考虑层级问题。
一个概念的覆盖范围大，并不代表其层级高。要处理好这个关系。

30. 实例：
隔水加热并不断搅拌,直到黑巧克力完全融化，成为可流动的液态。

加热	[动作].状态变化：{[属性]:温度,[数量变化]:[增加]} 动作.工具：[热源：【火】等。容器：锅壶等。] 动作.操作者:人 目的	ATTR_OF.[动作](操作者.状态:[有意识] or 操作者:[人，动物，机构]}
[这里不直接考虑拟人的情况，即不讲拟人作为目的的可选条件之一。因为拟人会带来很多人的属性，不只是目的或者意识。另外，限定人，机构，动物则彻底不考虑拟人的情况，这也不可以。应该加入“操作者.状态:[有意识]”]
【在描述时，加入“and or not”这些逻辑操作词语是有好处的。多个属性同时满足约束，是and，这种逻辑是默认的。那么，为啥不可以用or呢？在描述概念的取值范围时，这个是有必要的。概念的属性也是概念，属性的取值则是实例。】

[动作].目的	[动作].操作者.状态:{W_有意识}
“有意识”这个属于原始状态，待扩展。加上一个标识"W_"。
[动作]:   属性集合:{状态变化(结果)，工具，施体，受体，目的，原因，发生时间（持续时间），时态, 重复，发生时间+重复=频率}

隔 [位置关系].[实体数]:3	[话题焦点](self.位置关系])：[关系](实体1,实体2) [状态]:[关系](实体1,实体2) [动作].[状态变化]:None->self.[状态]
[话题焦点相当于数据库视图。一个次级概念，可以通过视图，只截取主概念框架的某个方面。这样，不同的次级概念，可以通过视图的模式来共享一个统一的主概念框架。]
[为什么这里要引入函数来表达“话题焦点”与“位置关系”的组合。因为两者互不包含。话题焦点更像一个函数。位置关系中如果引入话题焦点这个属性，则会极大地增加负担。]
[函数非常适合表达约束关系吧，将被约束的两个属性值放进去，然后约束的表达]
[话题焦点只针对描述概念，还是针对所有概念。那么，像实体、动作、状态，本身应该看成是描述概念了。描述概念本身也是概念。]
实体是对概念整体（实体）的指称，动作是概念（实体）之间的关系的建立并导致概念的属性值变化（状态变化），概念的属性值变化（状态变化）（新的属性值也可以看成新概念，新的概念之间的关系建立了，可以视为动作），状态是对概念属性的一个描述。

“隔”中不仅有位置上的关系，还对这种位置关系有功能上的考虑，就是阻止了O1和O2的某种交流。如，“隔着墙，我看不到电视。”
话题焦点是O1和O2的关系，促成这种关系的形成就是“隔离O1和O2”。用状态结果来表征动作。
“我和他之间隔着小明。”这里，如果将“隔着”换成“是”，则那种阻碍交流的作用就不突出了。
【过去的概念定义是用很多的概念。现在应该侧重于将概念进行分解。当然，同时要进行组合。】
【“隔”所涉及的位置关系，是一个包含三个实体的位置关系。位置关系可以分为多种。】

水 IS_A.[物理实体].[状态]:{物态：液态} [营养元素] [食材]
【上面的表述方式是不是隐含“水”是一个物理实体。但是，在有些情况下，并不是一个ISA关系。那么，在定义的时候怎么区分这些情况。】

并	SIGN_OF.[排列指示词].[排列对象]:(W_分句 or W_动词 or W_动词短语)
不断		[动作].[重复]:self
[重复]这个应该视为[动作]的一部分，还是与[动作]构成一个更大概念的组合关系。
这个跟食材列表一个性质。
另外，从概念层面来讲，[重复]与[动作]是组合关系。但是，在语法分层中，[重复]是作为动作的从属成分。

搅拌	IS_A.[加工工艺]（食材.IS_A.物理实体.形态：【集合.命名空间.组合穷举(内层逻辑:与, 外层逻辑:或, 元素列表:[液态，颗粒，粉末])】，工具：【勺 or 筷子 or ...】）
[这里的“集合”是一个命名空间。]

直到	SIGN_OF.[持续时间]:{终点：self.RIGHT, 状态:self.LEFT}
[动作表示状态（如“搅拌，因为可以持续一段时间”，动作的持续过程本身视为状态）。状态表示时间点。]
【这里的“直到”与“[状态]”不是ISA关系。】
["动词"什么时候可以表示状态，跟动词什么时候可以表示为实体概念是同一个问题。]
[SIGN_OF意味着不能单独表示一个完整的概念，只有与上下文结合起来才能表示一个完整的概念。因此，要引入LEFT和RIGHT等因素。]

凡是对一个概念进行描述的，都可以视为状态。如果进行定义，可以用名词描述。可以用动词描述，也可以用形容词描述。
动词可能会导致状态变化，也可以用做状态的指示词（结构性，描述功能，不具备概念层面的功能，如“是”，“有”。）。

[一个动作概念，从不同的视角去看，可以被看成为状态或者实体。
那么，这样的视角该怎么定义呢？
站在动作的参与者的角度，动作会导致参与者的状态变化，是动作。
但是，状态变化过程本身也可以看成是一种状态。]
[同一个概念，从不同的视角去看，可以看成实体，动作，或者状态。]

黑	IS_A.[状态].[实体对象]({[性质]:物理实体,[颜色]:self} or {[性质]:拟人实体,[W_品德]:坏})
黑	坏.ValueOf.{self.ISA.状态.实体对象.品德}

巧克力	IS_A.【食材】.[味道]:甜	IS_A.[菜品]:【西点】
【“.”与“：”的区别。前者表示从多个里面取一个。后者则表示定义。如果有多个，则应该取全部。】
因为一个概念通常有多个属性，因此用点号“.”来检索属性。

完全	ATTR_OF.[状态].[程度]：高		
融化	ATTR_OF.[物理实体]（[状态变化]：(属性：[物态]，变化前：固态，变化后：液态））
[简单状态变化。如果将动作视为状态，这种状态已经不是简单状态了。定义这种区别，对于操作是有意义的。]
【这里是“物态.状态变化”，还是“状态变化.物态”，还是“状态变化（物态）”呢？】
用函数组合更好。因为“状态变化”与“物态”两个概念是独立的，各自并不是另外一个概念的属性。
融化	IS_A.[状态变化]（对象：物理实体，属性：物态，变化前：固态，变化后：液态）
【取点号，则重心落在点号后面的概念了。在上面的例子中，不能用【物理实体】.【状态变化】，而应该用【物理实体】（状态变化）。因为前面的ATTR_OF是讲的“融化”和“【物理实体】”的关系。“【状态变化】”并不直接与“融化”发生关系。】

成为	SIGN_OF.[变化]:{变化前：[实体] as A，变化后：[实体] as B, 属性：集合.取一个(A.ATTR)=集合.取一个(B.ATTR)}
["成为"本身不能构成一个完整的变化。而是指示一个变化。所以，用attr_of]

可 [能愿动词].son.or。{[容许]，[允许]}
[能愿动词]	ATTR。状态：ATTR.收益	ATTR.意愿主体：{ATTR。是否主观}	ATTR。操作主体（self。ATTR。状态：【动作】）：ATTR。是否主观
【可能性】	【能愿动词】	【动作】。条件。满足程度
【意愿】	【能愿动词】。意愿主体：是否主观：是
【需要】	【能愿动词】。意愿主体：是否主观：否
【容许】	【能愿动词】。收益：（do->正,not do ->无。do：可以实现。）
【本质上可以不考虑收益】否定式（不容许）：（否定加在动词上，不影响收益，但是否定还加在do上=》do：不可以实现。）【原因容许】
【允许】	【能愿动词】。收益：(do->非负,not do->无)	   否定式（不允许）：（否定加在能愿动词上，同时影响收益）：do->负，not do->非负              【结果允许】

【结果对操作者有利，操作者知道可能有这个结果时，就会产生动机。操作者的对结果的预期就是目的。目的因为会产生动机，所以可以成为原因。这就是结果转变为原因的途径。】

【收益】	IS_A。关系（实体 as A，状态 as B）：{A：有意识}	 OR。【A。属性。身体状态：健康} ，{A。属性。心情：快乐}】

【怎么描述收益是很困难的。而且，在很多具体描述中，收益并不是显式的，而需要一个很长的因果链条。】

【不要停留在一个点，而大幅度推向前进，这样才不至于陷入到一个细节中。】

【能愿动词可以被否定。凡是能够被否定的东西都具有什么属性。
需要建立一个通用的否定框架，而不是单独为没给概念去建立否定概念。
一个概念中包含多个可以否定的因素。否定到底是加在那个因素上呢。“不容许”和“不允许”在否定上的侧重点就不同。】

流动	【位置变化】（实体。物态（液态）
的	【定语】的【中心语】	【ATTR-Value]的【实体】	【实体】的【ATTR】
的 开他的玩笑，拆老王的台   【表示动作的对象。动作的对象插入到动宾短语中间。】
[这种结构助词主要应该出现在描述模板中。词性和语法分析更类似于描述模板。]
的	死的死，伤的伤		【有的】

液态	
*态	  [这里是构词层面的一些逻辑。这个怎么表示呢？]

实体	概念的指称。
动作	概念之间关系的建立。
状态	概念的属性。	数量 WHO_IS_A（self).外观:[颜色，形状，质地，触感] 味道（气味） 
[广义的状态的本质是对概念的一个描述。谓语部分都可以视为状态。动作是一种特殊的状态。
动作因为涉及多个实体概念。因此，很难归为是哪个实体的状态。可以视为涉及的实体联合体的状态。]

时间
空间：位置关系
主观：目的

31. 目前的重心在于概念的表示：
要分解出基本概念框架，以便将诸多概念归结于这些基本概念框架。
基本概念框架不多，但是表示力要足够强大。


问题1：表示取值范围约束怎么写
问题2：表示属性的存在与否。 --------->怎么表示这个：动作存在目的这个属性与否当且仅当存在操作者，且操作者有主观意识。
上述的约束和属性存在性对于搜索和推导意味着什么。

32. [位置关系].[实体数]
为什么要有实体数这个属性，因为可以界定范围。一个很方便的因素。实际上，一个位置关系，是需要给出实体集合定义。
通常，可数集合有“数目”这个属性的，我们不需要单独为[位置关系]定义[实体数]这个属性。
应该是：[位置关系].[实体集合].[数目]


33. 条件关系与假设关系：
条件关系是一个必要条件。
假设关系是一个充分条件。
必要条件：A是B的必要条件，则A的内涵属于B的内涵，因为B的内涵必须包括A，但是A的外延则必须包括B的外延。A是B的充分条件，则B属于A，B是A的内涵的一部分。
A是B的必要条件，则非A是非B的充分条件。
充分条件：A->B   或者 非A|B
必要条件：A<-B	或者 非B|A   

都是在一个假设空间发生，不是事实。
不过，有些条件可以实现，有些条件不可能实现了。

A->B 则A的外延属于B的外延。A真则B真。集合分三部分，AB的交集，全是A，所以A真则B真。不存在非A与B的交集。

条件不一定是假设，如果是对过去事实的一个总结陈述。
“奶奶年纪大了，一着急就犯糊涂。”     这里是充分条件。但是，并没有假设的意思。
“母亲一知道就糟了，她会发病的。”   这里也是充分条件，而且带假设，因为条件还没有发生过。

因果关系与条件关系、假设关系的转换：
只要病了，就没来上学。    充分条件。
只有病了，才没来上学。     必要条件。
因为病了，所以没来上学。   因果关系通常可以看成充分条件（通常原因会引起结果）。
如果没有病，就来上学了。    假设关系都是都是充分条件。
A->B
非A<-非B

条件是包含因果关系的。可以将条件视为结果的原因。

[组合关系] 一个必要条件和其他必要条件组合后，构成充分条件。依赖于其他必要条件时，则称非充分。
[对等关系] 存在其他独立于本条件的充分条件时，则称非必要。

从必要条件到充分条件：
（1）因为必要条件的否定式，可以称为结果的否定式的充分条件。因此，在探讨结果否定式的原因时，必要条件就是原因了。
（2）与其他必要条件组合。

因为必要条件可以转化成充分条件，虽然因果关系要求是充分条件，但是因为必要条件可以转化成充分条件，因此我们可以将必要条件看成原因。

括号或者冒号都是赋值。点号才是引用属性。
从面向对象的编程经验来看，属性本身也是类。属性值则是类的实例。
“鱼”和“鱼类”的区别，前者是“鱼类”一个实例，后者则是class的一个实例。【这个可以类比JAVA编程。】


34. 话题与焦点
话题与主语


35. 名词通常是概念，是话题。与篇章挂钩。
动词是讲述概念之间的关系，或者描述概念的状态或状态变化。因此是焦点。通常是句子的中心。
动词的状态是副词。
实体的状态是形容词。


36。施事者，表示某事归某人去做
时间   开始，所处
空间   起点，所处，方向，终点
对象  服务对象，协同对象，行为对象，相关的另一对象，关系者，施事者，接受者，比较
依据	规定条件或者标准，按某种单位或者类别（具体的标准内容），根据某一方面来说
缘由	原因，目的
连  引进话题对比焦点
除了	表示不计算在内
趁		表示利用机会或条件

37
（1） 现在的问题，语法中的很多概念还不直接具有操作性。计算机无法执行，虽然我们人一看能够理解。
（2）现在不求完备，但是要把已经可以表示的概念，可以执行与操作的概念加入到系统中。
（3）定义几种元关系，为这些元关系定义操作。
IS_A关系，可以引用另外一个概念中的ATTR关系。

